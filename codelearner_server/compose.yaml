# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  php:
    build:
      context: .
      target: php
    volumes:
      - .:/var/www/html
      - php-socket:/var/run
    depends_on:
      - mysql
      - mongodb
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - APP_URL=${APP_URL}
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=${DB_DATABASE_MONGO}
      - MONGODB_USERNAME=${DB_USERNAME_MONGO}
      - MONGODB_PASSWORD=${DB_PASSWORD_MONGO}
    networks:
      - app-network
  
  nginx: 
    build: 
      context: .
      target: nginx
    command: >
      sh -c "
      echo 'Waiting for PHP-FPM to be ready...'
      sleep 10
      until nc -z php 9000; do
        echo 'PHP-FPM not ready, waiting...'
        sleep 2
      done
      echo 'PHP-FPM is ready! Starting nginx...'
      nginx -g 'daemon off;'
      " 
    ports:
      - "9000:80"
    depends_on:
      - php
    volumes:
      - .:/var/www/html
      - php-socket:/var/run
    networks:
      - app-network
    

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5000:3306"
    networks:
      - app-network

  mongodb:
    image: mongodb/mongodb-community-server:8.0-ubi9
    environment:
      MONGODB_INITDB_ROOT_USERNAME: ${MONGODB_INITDB_ROOT_USERNAME}
      MONGODB_INITDB_ROOT_PASSWORD: ${MONGODB_INITDB_ROOT_PASSWORD}
      MONGODB_INITDB_DATABASE: ${DB_DATABASE_MONGO}
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "27017:27017" # Optional: expose for local MongoDB clients
    networks:
      - app-network

volumes:
  mysql-data:
    driver: local
  mongo-data:
    driver: local
  php-socket:  # Add this volume for socket sharing
    driver: local
  

networks:
  app-network:
    driver: bridge