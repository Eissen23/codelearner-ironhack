# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  php:
    build:
      context: .
      target: php
    volumes:
      - .:/var/www/html
    depends_on:
      - mysql
      - mongodb
    environment:
      - APP_ENV=development
      - APP_KEY=base64:Yl1BBYcgWiZQxK0LzNrabcSN7x4Zo2F5eLit9PtzFvQ=
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_DATABASE=codelearner
      - DB_USERNAME=root
      - DB_PASSWORD=''
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=codelearner_problem
      - MONGODB_USERNAME=
      - MONGODB_PASSWORD=
    networks:
      - app-network
  
  nginx: 
    build: 
      context: .
      target: nginx
    ports:
      - "9000:80"
    depends_on:
      - php
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=codelearner
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongodb:
    image: mongodb/mongodb-community-server:8.0-ubi9
    environment:
      MONGO_INITDB_DATABASE: codelearner_problem
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "27017:27017" # Optional: expose for local MongoDB clients
    networks:
      - app-network

volumes:
  mysql-data:
  mongo-data:

networks:
  app-network:
    driver: bridge